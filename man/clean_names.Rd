% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_names.R
\name{clean_names}
\alias{clean_names}
\title{Cleans names of a data.frame.}
\usage{
clean_names(dat, case = "snake")
}
\arguments{
\item{dat}{the input data.frame.}

\item{case}{The desired target case (default is \code{"snake"}), provided as one of the following:
\itemize{
 \item{snake_case: \code{"snake"}}
 \item{lowerCamel: \code{"lower_camel"} or \code{"small_camel"}}
 \item{UpperCamel: \code{"upper_camel"} or \code{"big_camel"}}
 \item{ALL_CAPS: \code{"screaming_snake"} or \code{"all_caps"}}
 \item{lowerUPPER: \code{"lower_upper"}}
 \item{UPPERlower: \code{"upper_lower"}}
 }

 There are three "special" cases available:
\itemize{
 \item{\code{"parsed"}: Every substring a string consists of, surrounded by an underscore. No lower or 
 upper case pattern from the input string are changed.}
 \item{\code{"mixed"}: Almost the same as \code{case = "parsed"}. Every letter which is not at the start
 or behind an underscore is turned into lowercase.}
 \item{\code{"none"}: This case is just available as an artifact from the underlying snakecase-pkg, but shouldn't be called within the context of \code{clean_names()}.}
 }}
}
\value{
Returns the data.frame with clean names.
}
\description{
Resulting names are unique and consist only of the \code{_} character, numbers and letters regarding the specified \code{case}.

Accented characters are
transliterated to ASCII.  For example, an "o" with a german umlaut over it becomes "o", and the Spanish character "enye" becomes "n".
}
\examples{
# not run:
# clean_names(poorly_named_df)

# or with the pipe character from dplyr:
# poorly_named_df \%>\% clean_names()

# not run:
# library(readxl)
# readxl("messy_excel_file.xlsx") \%>\% clean_names()
}
